/*  Copyright (c) 2012 by Enrico Avventi, <eavventi yahoo it>

    This file is part of pure-linalg.

    pure-linalg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pure-linalg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pure-linalg.  If not, see <http://www.gnu.org/licenses/>.*/


using namespace __cblas, __linalg;
using pointers;

public conj;


/**********************************************************
****            preliminary definitions                ****
**********************************************************/


/* transpose and adjoint operators */
postfix (^) ^' ^*;

dim (A::matrix^') |
dim (A::matrix^*) = m,n when n,m = dim A; end;

// indexing
A::matrix^'!(i,j) = A!(j,i);
A::matrix^*!(i,j) = conj A!(j,i);

// slicing
A::matrix^'!!(is,js) = (A!!(js,is))^';
A::matrix^*!!(is,js) = (A!!(js,is))^*;

// these operations do not require data movement so can resolved automatically
(A::matrix^')^' = A;
v::matrix^' = rowvector v if colvectorp v;
v::matrix^' = colvector v if rowvectorp v;

(A::matrix^*)^* = A;
A::dmatrix^* = A^';
A::imatrix^* = A^'; // integer matrices are not supported by blas

// pack will force the evaluation
pack (A::matrix^') = transpose A;
pack (A::matrix^*) = transpose $ conj A; // FIX ME: this needs to be done in one go


/**********************************************************
****                  blas wrappers                    ****
**********************************************************/

namespace __cblas;
using "lib:libblas";

// getting various enums values for controlling blas routines
using "lib:cblas_enums";

// row or colum major enums
private extern void* row_major();
private extern void* col_major();

const CblasRowMajor = row_major;
const CblasColMajor = col_major;

// transpose and adjoint enums
private extern void* no_trans();
private extern void* trans();
private extern void* conj_trans();

const CblasNoTrans = no_trans;
const CblasTrans = trans;
const CblasConjTrans = conj_trans;

/* daxpy */
extern void cblas_daxpy(int n,double alpha,void* x,int incx,void* y,int incy);

/* dgemv */
extern void cblas_dgemv(void* order, void* transA, int M, int N, double alpha,
    double* A, int lda, double* x, int incx, double beta, double* y, int incy);

/* dgemm */
extern void cblas_dgemm(void* order, void* transA, void* transB, int M, int N, 
    int K, double alpha, double* A, int lda, double* B, int ldb, double beta, 
    double* C, int ldc);
namespace;


/**********************************************************
****              algebraic formulas                   ****
**********************************************************/


// this namespace is for keeping the internal symbols private
namespace __linalg; 

#! --if hide_internal
private infix (::*) *;
private mul;    // outer multiplication chain
private in_mul; // inner multiplication chain
private sum;
private tmp;    // function that wraps temporary results
#! --else
infix (::*) *;
#! --endif

/* preprocessing of algebraic expressions */

// substitute multiplication chains with the private function __linalg::mul
#! --if optmul
def (a ::* b) ::* c   |
    a ::*(b ::* c) = mul (a,b,c);
def mul l ::* a = mul (l,a);
#! --endif

/* resolving multiplication chains first 

outer chains resolve completely into a matrix while inner chains
resolve to a single multiplication denoted by __linalg::* in order to
be further optimized. 

the associativity property is used to reduce the number of flops.
this optimization is performed locally, considering three terms 
at a time, and is thus suboptimal.*/

//mul (A::dmatrix,B::dmatrix,C::dmatrix,rest) = mul (D,C,rest)


//mul (A::dmatrix,B::dmatrix,C::dmatrix) = D ::* C;


/*in_mul (a::var,b::var,c::var,rest) = in_mul (ab,c,rest);
in_mul (a::var,b::var,c::var) = ab * c; */


// matrix-vector outer multiplication
A::dmatrix ::* x::dmatrix = y
    when
        mA, nA = dim A;
        y = double_matrix (mA,1) NULL;
        _ = cblas_dgemv CblasRowMajor CblasNoTrans mA nA 1.0 A nA x 1 1.0 y 1;
    end
    if dim x!1 == 1 && dim A!1 == dim x!0;
A::dmatrix^' ::* x::dmatrix = y
    when
        mA, nA = dim A;
        y = double_matrix (nA,1) NULL;
        _ = cblas_dgemv CblasRowMajor CblasTrans mA nA 1.0 A nA x 1 1.0 y 1;
    end 
    if dim x!1 == 1 && dim A!0 == dim x!0;

// vector-matrix outer multiplication
x::dmatrix ::* A::dmatrix = y
    when
        mA, nA = dim A;
        y = double_matrix (1,nA) NULL;
        _ = cblas_dgemv CblasRowMajor CblasTrans mA nA 1.0 A nA x 1 1.0 y 1;
    end
    if dim x!0 == 1 && dim A!0 == dim x!1;
x::dmatrix ::* A::dmatrix^' = y
    when
        mA, nA = dim A;
        y = double_matrix (1,mA) NULL;
        _ = cblas_dgemv CblasRowMajor CblasNoTrans mA nA 1.0 A nA x 1 1.0 y 1;
    end
    if dim x!0 == 1 && dim A!1 == dim x!1;

// matrix-matrix outer multiplication
A::dmatrix ::* B::dmatrix = C
    when
        mA, nA = dim A;
        mB, nB = dim B;
        C = double_matrix (mA,nB) NULL;
        _ = cblas_dgemm CblasRowMajor CblasNoTrans CblasNoTrans mA nB nA 1.0 A nA B nB 1.0 C nB;
    end
    if dim A!1 == dim B!0;
A::dmatrix^' ::* B::dmatrix = C
    when
        mA, nA = dim A;
        mB, nB = dim B;
        C = double_matrix (nA,nB) NULL;
        _ = cblas_dgemm CblasRowMajor CblasTrans CblasNoTrans nA nB mA 1.0 A nA B nB 1.0 C nB;
    end 
    if dim A!0 == dim B!0;
A::dmatrix ::* B::dmatrix^' = C
    when
        mA, nA = dim A;
        mB, nB = dim B;
        C = double_matrix (mA,mB) NULL;
        _ = cblas_dgemm CblasRowMajor CblasNoTrans CblasTrans mA mB nA 1.0 A nA B nB 1.0 C mB;
    end
    if dim A!1 == dim B!1; 
A::dmatrix^' ::* B::dmatrix^' = C
    when
        mA, nA = dim A;
        mB, nB = dim B;
        C = double_matrix (nA,mB) NULL;
        _ = cblas_dgemm CblasRowMajor CblasTrans CblasTrans nA mB mA 1.0 A nA B nB 1.0 C mB;
    end
    if dim A!0 == dim B!1;

// catch all error
A::dmatrix   ::* B::dmatrix   |
A::dmatrix^' ::* B::dmatrix   |
A::dmatrix   ::* B::dmatrix^' |
A::dmatrix^' ::* B::dmatrix^' = throw dimensions_mismatch;

/* summation */

A::dmatrix   ::+ B::dmatrix   = zipwith (::+) A B if dim A == dim B;
A::dmatrix^' ::+ B::dmatrix^' = (zipwith (::+) A B)^' if dim A == dim B;
/*A::dmatrix^' ::+ B::dmatrix   |
B::dmatrix   ::+ A::dmatrix^' = C
    when 
        n, m = dim B;
        C = pack B;
        pA = pointer A;
        pC = pointer C;
    end
    if dim (A^') == dim B;*/
    

A::dmatrix   ::+ B::dmatrix   |
A::dmatrix^' ::+ B::dmatrix   |
A::dmatrix   ::+ B::dmatrix^' |
A::dmatrix^' ::+ B::dmatrix^' = throw dimensions_mismatch;
   

namespace;
