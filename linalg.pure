/*  Copyright (c) 2012 by Enrico Avventi, <eavventi yahoo it>

    This file is part of pure-linalg.

    pure-linalg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pure-linalg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pure-linalg.  If not, see <http://www.gnu.org/licenses/>.*/


using namespace __cblas, __linalg;
using base;


/**********************************************************
****              algebraic formulas                   ****
**********************************************************/


// this namespace is for keeping the internal symbols private
namespace __linalg; 

#! --if hide_internal
private infix (::*) *;
private mul;    // outer multiplication chain
private in_mul; // inner multiplication chain
private sum;
private tmp;    // function that wraps temporary results
#! --else
infix (::*) *;
#! --endif

/* preprocessing of algebraic expressions */


/* substitute multiplication chains with the private function __linalg::mul */
#! --if optmul
def (a ::* b) ::* c   |
    a ::*(b ::* c) = mul (a,b,c);
def mul l ::* a = mul (l,a);
#! --endif

/* substitute addition chains containing multiplications terms with
 the private function __linalg::sum

whenever a term in the summation is a simple multiplication - i.e
not a chain - the multiplication symbol ::* is replaced with the 
private symbol __linalg::*

whenever a term in the summation is a chain of multiplications the
private function __linalg::in_mul is used instead of __linalg::mul

all terms containing no multiplication are moved at the head of the 
tuple. 

note that the described macros and the related optimization is disabled 
by default.*/

#! --ifnot notmp
def sum l ::+ a ::* b = sum(l,a * b);
def sum l1 ::+ mul l2 = sum(l1,in_mul l2);
def sum l ::+ a = sum (a,l);

def a ::* b ::+ c ::* d = sum (a * b,c * d);
def mul l ::+ a ::* b |
    a ::* b ::+ mul l = sum(a * b,in_mul l);
def mul l1 ::+ mul l2 = sum(in_mul l1,in_mul l2);

def a ::* b ::+ c |
    c ::+ a ::* b = sum (c,a * b);
def mul l ::+ c |
    c ::+ mul l = sum (c,in_mul l);

def sum (a ::+ b,rest) = sum(a,b,rest);
#! --endif

/* transpose/adjoint optimizations */

#! --if adjopt
def (A ::* B)::^' = B ::^' ::* A ::^';
def (A ::* B)::^* = B ::^* ::* A ::^*;
def (mul l)::^' = mul $ iter_trans l 
    with
        iter_trans (A,rest) = (iter_trans rest, A ::^');
    end;
def (mul l)::^* = mul $ iter_adj l 
    with
        iter_adj (A,rest) = (iter_adj rest, A ::^*);
    end;
#! --endif

/* resolving multiplication chains

outer chains resolve completely into a matrix while inner chains
resolve to a single multiplication denoted by __linalg::* in order to
be further optimized. 

the associativity property is used to reduce the number of flops.
this optimization is performed locally, considering three terms 
at a time, and is thus suboptimal.*/

#! --if optmul
mul (A::xmatrix,B::xmatrix,C::xmatrix,rest) = if dim B!0 < dim B!1 
    then mul (D,C,rest) when D = A ::* B; end
    else mul (A,D,rest) when D = B ::* C; end;

mul (A::xmatrix,B::xmatrix,C::xmatrix) = if dim B!0 < dim B!1 
    then D ::* C when D = A ::* B; end
    else A ::* D when D = B ::* C; end;

in_mul (A::xmatrix,B::xmatrix,C::xmatrix,rest) = if dim B!0 < dim B!1 
    then in_mul (D,C,rest) when D = A ::* B; end
    else in_mul (A,D,rest) when D = B ::* C; end;

in_mul (A::xmatrix,B::xmatrix,C::xmatrix) = if dim B!0 < dim B!1 
    then D * C when D = A ::* B; end
    else A * D when D = B ::* C; end;

// if no rule is applicable just apply ::*
mul (A,B,C,rest) = mul (D,C,rest) when D = A ::* B; end; 
mul (A,B,C) = D ::* C when D = A ::* B; end;
in_mul (A,B,C,rest) = mul (D,C,rest) when D = A ::* B; end; 
in_mul (A,B,C) = D ::* C when D = A ::* B; end;
#! --endif

/* rules resolving a sum and a multiplication in the form

    C + A*B

that take advantage of temporary matrices flagged by __linalg::tmp, 
modifing them in place.*/

#! --ifnot notmp
sum (tmp C::dmatrix,A::xmatrix * B::xmatrix) = C
    when
        _ = inplace_mulsum A B C;
    end;

sum (tmp y::dmatrix,A::xmatrix * B::xmatrix,rest) = sum (tmp C,rest)
    when
        _ = inplace_mulsum A B C;
    end;   
#! --endif


/* rules resolving a sum and a multiplication without modifing existing 
matrices. the result is stored in a newly allocated matrix.*/

#! --ifnot notmp
sum (C::dmatrix,A::xmatrix * B::xmatrix) = out
    when
        out = pack C;
        _ = inplace_mulsum A B out;
    end;

sum (C::dmatrix,A::xmatrix * B::xmatrix,rest) = sum (tmp out,rest)
    when
        out = pack C;
        _ = inplace_mulsum A B out;
    end;
#! --endif


/* rule resolving a multiplication alone. */

#! --ifnot notmp
sum (A::xmatrix * B::xmatrix,rest) = sum (tmp out,rest)
    when
        out = double_matrix (dim A!0,dim B!1) NULL;
        _ = inplace_mulsum A B out;
    end;
#! --endif

namespace;
